class Solution {
public:
    
   bool checksum(vector<int> &nums,int target,int ind, vector<vector<int>> &dp){
        
        if(target == 0) return true;
        if(ind == 0){
            if(target == nums[ind]) return true;
            
                return false;
        }
        
         if(dp[ind][target]!= -1)
        return dp[ind][target];
        
        bool notpick = false;
        notpick = checksum(nums,target,ind-1,dp);
        
        bool pick = false;
        if(target >= nums[ind]){
             pick = checksum(nums,target-nums[ind],ind-1,dp);
        }              
       
        
        return dp[ind][target] = notpick || pick;
        
    }
    bool canPartition(vector<int>& nums) {
        int len = nums.size();
        int sum = 0;       
       
        for(int i = 0;i<len;i++){
            sum+=nums[i];
        }
         
        if(sum%2 != 0) return false;
        vector<vector<int>> dp(len,vector<int>((sum/2)+1,-1));
        
        bool ans = checksum(nums,sum/2,len-1,dp);
        return ans;
        
    }
};
